name: Deploy Number Acidizer

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: acidizer-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Test backend
        working-directory: ./backend
        run: |
          npm ci
          npm test

      - name: Test frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Build and push Docker image
        working-directory: ./backend
        run: |
          # Create ECR repo if needed
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com

          # Build and push
          ECR_URI=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY
          docker build -t $ECR_URI:latest .
          docker push $ECR_URI:latest

      - name: Deploy infrastructure
        working-directory: ./infrastructure
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="lambda_image_uri=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest"

      - name: Build and deploy frontend
        run: |
          # Get API URL
          API_URL=$(cd infrastructure && terraform output -raw api_gateway_url)

          # Build frontend
          cd frontend
          VITE_API_URL=$API_URL npm run build

          # Deploy to S3
          BUCKET_NAME=$(cd ../infrastructure && terraform output -raw s3_bucket_name)
          aws s3 sync dist/ s3://$BUCKET_NAME --delete

      - name: Test deployment
        run: |
          API_URL=$(cd infrastructure && terraform output -raw api_gateway_url)
          curl -f "$API_URL"
          curl -f -X POST "$API_URL" -H "Content-Type: application/json" -d '{"action":"increment"}'