name: Deploy Number Acidizer Backend

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: acidizer-backend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Test backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build
          npm run lint
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "ecr_repo=acidizer-backend" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "ecr_repo=acidizer-backend-dev" >> $GITHUB_OUTPUT
          fi

      - name: Setup AWS resources
        working-directory: ./infrastructure
        run: |
          chmod +x setup.sh
          ./setup.sh

      - name: Build and push Docker image
        working-directory: ./backend
        env:
          ECR_REPO: ${{ steps.set-env.outputs.ecr_repo }}
        run: |
          # Create ECR repo if needed
          aws ecr describe-repositories --repository-names $ECR_REPO || \
          aws ecr create-repository --repository-name $ECR_REPO

          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com

          # Build and push
          ECR_URI=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO
          docker build -t $ECR_URI:latest .
          docker push $ECR_URI:latest

      - name: Deploy backend infrastructure
        working-directory: ./infrastructure
        env:
          TF_VAR_environment: ${{ steps.set-env.outputs.environment }}
          TF_VAR_lambda_image_uri: ${{ format('{0}.dkr.ecr.{1}.amazonaws.com/{2}:latest', github.actor, env.AWS_REGION, steps.set-env.outputs.ecr_repo) }}
        run: |
          # Use workspace for environment isolation
          terraform init
          terraform workspace select ${{ steps.set-env.outputs.environment }} || terraform workspace new ${{ steps.set-env.outputs.environment }}

          terraform plan \
            -var="lambda_image_uri=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com/${{ steps.set-env.outputs.ecr_repo }}:latest" \
            -var="environment=${{ steps.set-env.outputs.environment }}"

          terraform apply -auto-approve \
            -var="lambda_image_uri=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com/${{ steps.set-env.outputs.ecr_repo }}:latest" \
            -var="environment=${{ steps.set-env.outputs.environment }}"

      - name: Test API deployment
        working-directory: ./infrastructure
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Get API URL
          API_URL=$(terraform output -raw api_url)
          echo "üåê API deployed at: $API_URL"

          # Test GET request
          echo "Testing GET request..."
          curl -f "$API_URL" || echo "‚ö†Ô∏è GET request failed (might be initializing)"

          # Test POST increment
          echo "Testing POST increment..."
          curl -f -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -d '{"action":"increment"}' || echo "‚ö†Ô∏è POST request failed (might be initializing)"

          echo "‚úÖ Backend deployment completed!"
          echo "üì° Environment: ${{ steps.set-env.outputs.environment }}"
          echo "üîó API Gateway URL: $API_URL"